<?php
/*****************************************
*
* $Id: class.template.php,v 1.10 2003/10/13 13:07:12 jan Exp $
*
* File      :   $RCSfile: class.template.php,v $
* Project   :   Contenido
* Descr     :   Contenido Template Engine
*
* Author    :   $Author: jan $
* Modified  :   $Date: 2003/10/13 13:07:12 $
*
* Â© four for business AG, www.4fb.de
******************************************/

/**
 * class Template
 *
 * Light template mechanism
 *
 * @author Jan Lengowski <Jan.Lengowski@4fb.de>
 * @copyright four for business <http://www.4fb.de>
 * @version 1.0
 */
class Template
{
    /**
     * Needles (static)
     * @var array
     */
    var $needles = array();
    
    /**
     * Replacements (static)
     * @var array
     */
    var $replacements = array();
    
    /**
     * Dyn_Needles (dynamic)
     * @var array
     */
    var $Dyn_needles = array();

    /**
     * Dyn_Replacements (dynamic)
     * @var array
     */
    var $Dyn_replacements = array();

    /**
     * Database instance
     * @var object
     */
    var $db;
 
    /**
     * Template cache
     * @var array
     */
    var $tplcache;

    /**
     * Template name cache
     * @var array
     */
    var $tplnamecache;
           
    /**
     * Dynamic counter
     * @var int
     */
    var $dyn_cnt = 0;

    /**
     * Tags array (for dynamic blocks);
     * @var array
     */
    var $tags = array('static'  =>  '{%s}',
                      'start'   =>  '<!-- BEGIN:BLOCK -->',
                      'end'     =>  '<!-- END:BLOCK -->');
                      
    /**
     * Constructor function
     * @return void
     */
    function Template($tags = false) 
    {
    	$this->db = new DB_Contenido;

        $this->tplcache = Array();
    	$this->tplnamecache = Array();
    	
        if (is_array($tags))
        {
            $this->tags = $tags;
        }
    } // end function
    
    /**
     * Set Templates placeholders and values
     *
     * With this method you can replace the placeholders
     * in the static templates with dynamic data.
     *
     * @param $which String 's' for Static or else dynamic
     * @param $needle String Placeholder
     * @param $replacement String Replacement String
     *
     * @return void
     */
    function set($which = 's', $needle, $replacement)
    {
        if ($which == 's')
        { // static
            $this->needles[] = sprintf($this->tags['static'], $needle);
            $this->replacements[] = $replacement;
            
        } else { // dynamic
            $this->Dyn_needles[$this->dyn_cnt][] = sprintf($this->tags['static'], $needle);            
            $this->Dyn_replacements[$this->dyn_cnt][] = $replacement;
            
        }
    }
    
    /**
     * Iterate internal counter by one
     *
     * @return void
     */
    function next()
    {
        $this->dyn_cnt ++;
    }

    /**
     * Reset template data
     *
     * @return void
     */
    function reset()
    {
        $this->dyn_cnt = 0;
        $this->needles = array();
        $this->replacements = array();
        $this->Dyn_needles = array();
        $this->Dyn_replacements = array();
    }
    
    /**
     * Generate the template and
     * print/return it.
     *
     * @param $template string/file Template
     * @param $return bool Return or print template
     * @param $note bool Echo "Generated by ... " Comment
     *
     * @return string complete Template string
     */
    function generate($template, $return = 0, $note = 1)
    {
        global $cfg;

        # parts of the template
        $tmp_template['start']      = '';
        $tmp_template['block']      = '';
        $tmp_template['end']        = '';
        $tmp_template['block']      = '';
        $tmp_template['complete']   = '';

        # check if the template is a file or a string
        if(!@file_exists($template)) {
            # template is a string
            $tmp_template['complete'] = explode("\n", $template);
        } else {
            # template is a file
            $tmp_template['complete'] = file($template);
        }

        # line numbers for
        # the dynamic blocks
        $tmp_template['line_nr']['start']   = 0;
        $tmp_template['line_nr']['end']     = 0;
        $tmp_template['line_nr']['max']     = count($tmp_template['complete']);

        # search the template for
        # dynamic blocks
        foreach ($tmp_template['complete'] as $line => $content)
        {
            # search for start block tag
            if (strstr($content, $this->tags['start']))
            {
                $tmp_template['line_nr']['start'] = $line;
            }

            # search for end block tag
            if (strstr($content, $this->tags['end']))
            {
                $tmp_template['line_nr']['end'] = $line;
            }
        }

       $tmp_template['start'] = ($note) ? "<!-- Generated by Contenido ".$cfg['version']."-->\n" : '';

        # extract start part
        for ($i=0; $i<$tmp_template['line_nr']['start']; $i++)
        {
            $tmp_template['start'] .= $tmp_template['complete'][$i];
        }

        # extract block
        for ($i=$tmp_template['line_nr']['start']+1; $i<$tmp_template['line_nr']['end']; $i++)
        {
            $tmp_template['block'] .= $tmp_template['complete'][$i];
        }

        # extract end part
        for ($i=$tmp_template['line_nr']['end']+1; $i<$tmp_template['line_nr']['max']; $i++)
        {
            $tmp_template['end'] .= $tmp_template['complete'][$i];
        }

        $tmp_template['return'] = '';
        $tmp_template['return'] .= str_replace($this->needles, $this->replacements, $tmp_template['start']);

        # generate blocks
        for ($i=0; $i<$this->dyn_cnt; $i++)
        {
            $tmp_template['return'] .= str_replace($this->Dyn_needles[$i], $this->Dyn_replacements[$i], $tmp_template['block']);
        }

        # end part
        $tmp_template['return'] .= str_replace($this->needles, $this->replacements, $tmp_template['end']);

		$tmp_template['return'] = $this->replacei18n($tmp_template['return'], "i18n",  $template);
		$tmp_template['return'] = $this->replacei18n($tmp_template['return'], "trans", $template);

        if ($tmp_template['line_nr']['start'] == 0 && $tmp_template['line_nr']['end'] == 0)
        {   // No dynamic block in template
            $tmp_template['return'] = ($note) ? "<!-- Generated by Contenido ".$cfg['version']."-->\n" : '';

            for ($i=0; $i<$tmp_template['line_nr']['max']; $i++)
            {
                $tmp_template['return'] .= $tmp_template['complete'][$i];
            }
            
            $tmp_template['return'] = str_replace($this->needles, $this->replacements, $tmp_template['return']);
            $tmp_template['return'] = $this->replacei18n($tmp_template['return'], "i18n",  $template);
            $tmp_template['return'] = $this->replacei18n($tmp_template['return'], "trans", $template);
        }
        
        if ($return)
        {
            return $tmp_template['return'];
        }
        
        echo $tmp_template['return'];

    } # end function


    /**
     * replacei18n()
     *
     * Replaces a named function with the translated variant
     *
	 * @param $template string Contents of the template to translate
     * @param $functionName string Name of the translation function (e.g. i18n)
     * @param $templateName string Name of the template
     * @return string  Returns the name of the given template
     */
	function replacei18n($template, $functionName, $templateName)
	{
		$fin = 0;
		$lastStart = 0;
		
		while ($fin == 0)
		{
			# Extract the message
			$start = strpos($template, $functionName.'("', $lastStart);
			$mode = 1;
			
			if ($start === false) { 
				$start = strpos($template, $functionName."('", $lastStart);
				$mode = 2;
			}
			
			if ($start === false) { $fin = 1; }
			
			if ($mode == 1)
			{ 
				$end = strpos($template, '")', $start);
			} else {
				$end = strpos($template, "')", $start);
			}
			
			if (($end === false) && ($fin == 0))
			{
				echo "Warning: Unterminated i18n function in template ".$templateName;
			}
	
			if ($fin == 0)
			{
				
    			$msgstart = $start + 6;
    			$msgend = $end;
    			
    			$message = substr($template, $msgstart, $msgend-$msgstart);
    			$message = i18n($message);

    			$replace = substr($template, $start, $end-$start+2);
    			$template = str_replace($replace, $message, $template);
			
				$lastStart = $start+6;
			}
		}
		
		return ($template);
	}
	
    /**
     * getTemplateName()
     * Returns the name for the given template
     * @return string  Returns the name of the given template
     */
    function getTemplateName($tplid) {
        global $cfg;

		if (array_key_exists((int)$tplid, $this->tplnamecache))
		{
			return $this->tplnamecache[$tplid];
		}
		
        $sql = "SELECT
                    name
                FROM
                ". $cfg["tab"]["tpl"] ."
                WHERE
                    idtpl = '".$tplid."'";

        $this->db->query($sql);
        $this->db->next_record();

		$this->tplnamecache[$tplid] = $this->db->f("name");
        return ($this->db->f("name"));

    } // end function

    /* getTemplateNameFromTPLCFG()
     * Returns the name for the given template using the template configuration ID
     * @return string  Returns the name of the given template
     */
    function getTemplateNameFromTPLCFG($tplcfg) {
        global $cfg;

		if (array_key_exists($tplcfg,$this->tplcache))
		{
			return $this->tplcache[$tplcfg];
		}
		
        $sql = "SELECT
                    idtpl
                FROM
                ". $cfg["tab"]["tpl_conf"] ."
                WHERE
                    idtplcfg = '".$tplcfg."'";
        $this->db->query($sql);
        $this->db->next_record();

		$this->tplcache[$tplcfg] = $this->getTemplateName($this->db->f("idtpl"));
        return ($this->tplcache[$tplcfg]);

    } // end function
    
} # end class

?>
