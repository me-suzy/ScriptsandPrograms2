/*	$Id: clsDatabaseOracleHistoricalData.cpp,v 1.4 1998/12/06 05:31:56 josh Exp $	*/
//
//	File:	clsDatabaseOracleHistoricalData.cc
//
//	Class:	clsDatabaseOracle
//
//	Author:	Michael Wilson (michael@ebay.com)
//
//	Function:
//  All historical data relasted methods for Oracle
//
// Modifications:
//				- 10/25/97 michael	- Created

#include "eBayKernel.h"

//
// AddManyUsers
//
//	This method is intended purely as a migration
//	tool for loading an existing database of users
//	into the system. 
//
//	It accepts arrays of information which must
//	conform to Oracle's array processing spec --
//	namely that all array elements are of equal 
//	length. 
//
//	Ids are generated by using a sequence, rather 
//	than letting the caller assign them
//
static const char *SQL_AddHistoricalInfo =
 "insert into ebay_historical_data			\
	(	user_id,							\
		period_start,						\
		category_id,						\
		items_bought,						\
		dollars_bought,						\
		items_sold,							\
		dollars_sold,						\
		items_unsold,						\
		dollars_unsold						\
	)										\
	values									\
	(	:user_id,							\
		TO_DATE(:pbegin,					\
				'YYYY-MM-DD HH24:MI:SS'),	\
		:cid,								\
		:ibought,							\
		:dbought,							\
		:isold,								\
		:dsold,								\
		:iusold,							\
		:dusold								\
	)";

static const char *SQL_UpdateHistoricalInfo =
	"update ebay_historical_data							\
		set	items_bought	= items_bought + :ibought,		\
			dollars_bought	= dollars_bought + :dbought,	\
			items_sold		= items_sold + :isold,			\
			dollars_sold	= dollars_sold + :dsold,		\
			items_unsold	= items_unsold + :iusold,		\
			dollars_unsold	= dollars_unsold + :dusold		\
		where	user_id			= :user_id					\
			and	period_start	=							\
					TO_DATE(:pbegin,						\
							'YYYY-MM-DD HH24:MI:SS')		\
			and	category_id		= :cid";



void clsDatabaseOracle::AddHistoricalInfo(int count,
										  int *pIds,
										  char *pPeriodBegins,
										  int periodBeginSize,
										  int *pCategoryIds,
										  int *pItemsSold,
										  float *pDollarsSold,
										  int *pItemsBought,
										  float *pDollarsBought,
										  int *pItemsNotSold,
										  float *pDollarsNotSold)
{
	int		rc;
	int		rpc;

	// Do our cursor thing
	OpenAndParse(&mpCDAOneShot, SQL_AddHistoricalInfo);

	// Now, the binds
	Bind(":user_id", pIds);
	Bind(":pbegin", (char *)pPeriodBegins, periodBeginSize);
	Bind(":cid", pCategoryIds);
	Bind(":ibought",pItemsBought);
	Bind(":dbought", pDollarsBought);
	Bind(":isold",pItemsSold);
	Bind(":dsold", pDollarsSold);
	Bind(":iusold",pItemsNotSold);
	Bind(":dusold", pDollarsNotSold);

	// Call oexn directly
	rc	= oexn((cda_def *)mpCDACurrent, count, 0);

	// If we got a rc == -9 then it's probably an integrity
	// violation, and we need to UPDATE a row, instead of 
	// adding it. We're going to do this in an amazingly 
	// grotty way, so watch out!
	if (rc == -9)
	{
		// Save the count of rows processed
		rpc		=	((struct cda_def *)mpCDACurrent)->rpc;

		// Testing
		// printf("** Updating, rpc %d\n", rpc);

		// Commit the work we've done so far.
		Commit();

		// Close the cursor
		Close(&mpCDAOneShot);
		SetStatement(NULL);

		//printf("Update: U %d, B %s, C %d\n",
		//		 *(pIds + rpc),
		//		 pPeriodBegins + (rpc * periodBeginSize),
		//		 *(pCategoryIds + rpc));

		// Now, let's set up to do the update
		OpenAndParse(&mpCDAOneShot, SQL_UpdateHistoricalInfo);
		Bind(":user_id", pIds + rpc);
		Bind(":pbegin", pPeriodBegins + (rpc * periodBeginSize), periodBeginSize);
		Bind(":cid", pCategoryIds + rpc);
		Bind(":ibought",pItemsBought + rpc);
		Bind(":dbought", pDollarsBought + rpc);
		Bind(":isold",pItemsSold + rpc);
		Bind(":dsold", pDollarsSold + rpc);
		Bind(":iusold",pItemsNotSold + rpc);
		Bind(":dusold", pDollarsNotSold + rpc);

		// Do the update
		Execute();

		// Test
		if (((struct cda_def *)mpCDACurrent)->rpc != 1)
		{
			printf("Help!\n");
		}

		// Finish up update
		Commit();
		Close(&mpCDAOneShot);
		SetStatement(NULL);

		// If that was the last row, then we're done
		if (rpc == count - 1)
		{
			return;
		}

		// Now, let's call ourselves..
		AddHistoricalInfo(count - rpc - 1,
						  pIds + rpc + 1,
						  pPeriodBegins + ((rpc + 1) * periodBeginSize),
						  periodBeginSize,
						  pCategoryIds + rpc + 1,
						  pItemsSold + rpc + 1,
						  pDollarsSold + rpc + 1,
						  pItemsBought + rpc + 1,
						  pDollarsBought + rpc + 1,
						  pItemsNotSold + rpc + 1,
						  pDollarsNotSold + rpc + 1);

		return;
	}

	// Else, just proceed ;-).
	Check(rc);

	// Close stuff
	Commit();
	Close(&mpCDAOneShot);
	SetStatement(NULL);

	return;
}


