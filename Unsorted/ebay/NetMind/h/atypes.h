/* Copyright (C) RSA Data Security, Inc. created 1992.  This is an
   unpublished work protected as such under copyright law.  This work
   contains proprietary, confidential, and trade secret information of
   RSA Data Security, Inc.  Use, disclosure or reproduction without the
   express written authorization of RSA Data Security, Inc. is
   prohibited.
 */

#ifndef _ATYPES_H_
#define _ATYPES_H_ 1

#include "bsfmacro.h"
#include "bsfplatf.h"

#include "aglobal.h"

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  unsigned char *key;                                      /* 8-byte DES key */
  unsigned char *inputWhitener;                     /* 8-byte input whitener */
  unsigned char *outputWhitener;                   /* 8-byte output whitener */
} A_DESX_KEY;

typedef struct {
  ITEM prime;                                                       /* prime */
  ITEM base;                                                         /* base */
  unsigned int exponentBits;
} A_DH_KEY_AGREE_PARAMS;

typedef struct {
  unsigned int primeBits;
  unsigned int exponentBits;
} A_DH_PARAM_GEN_PARAMS;

typedef struct {
  unsigned int primeBits;
  unsigned int subPrimeBits;
  unsigned int seedBytesLen;
} A_PQG_PARAM_GEN_PARAMS;

typedef struct {
  ITEM prime;                                                   /* prime (p) */
  ITEM subPrime;                                            /* sub prime (q) */
  ITEM base;                                                     /* base (g) */
  ITEM seed;				         /* as per FIPS 186 standard */
  unsigned int counterValue;			 /* ditto		     */
} A_PQG_PARAMS;

typedef A_PQG_PARAMS A_DSA_PARAMS;

/* Note that fieldElementBits is not contained in A_EC_PARAMS,
     but can be easily recovered from fieldInfo. */
/* The following #define's are for fieldType.
     FT_FP is odd prime characteristic
     FT_F2_ONB is characteristic 2, optimal normal basis
     FT_F2_POLYNOMIAL is characteristic 2, polynomial basis
 */
#define FT_FP             0
#define FT_F2_ONB         1
#define FT_F2_POLYNOMIAL  2
#define FT_F2_TRINOMIAL   3
/* The following #define's are for compressIndicator
     CI_COMPRESS compress the base and public key (if generated)
     CI_NO_COMPRESS no compression
 */
#define CI_NO_COMPRESS  0
#define CI_COMPRESS     1
#define CI_HYBRID       2

typedef struct {
  unsigned int version;
  unsigned int fieldType;	  /* base field for elliptic curve           */
  unsigned int fieldElementBits;  /* length of field element in bits.        */                                  /* element.				     */
  unsigned int minOrderBits;	  /* minimum size of group generated by base */
  unsigned int trialDivBound;     /* maximum size of second largest prime    */
				  /* subgroup of group generated by base     */
  unsigned int compressIndicator;
  unsigned int tableLookup; /* tableLookup option available for F_{2^m} only */

} A_EC_GEN_PARAMS;

typedef struct {
  unsigned int version;
  unsigned int fieldType;
  ITEM fieldInfo;
  ITEM coeffA;
  ITEM coeffB;
  ITEM base;
  ITEM order;
  ITEM cofactor;		     /* cofactor * order = # points on curve */
  unsigned int compressIndicator;
  unsigned int fieldElementBits;
} A_EC_PARAMS;

typedef struct {
  A_EC_PARAMS curveParams; /* Must be first field to support pointer casting */
  ITEM publicKey;
} A_EC_PUBLIC_KEY;

typedef struct {
  A_EC_PUBLIC_KEY ecParams; /* Treated as a union for programming conven. */
  ITEM *precomTable;
} A_EC_PARAMS_EXTEND;
	
typedef struct {
  A_EC_PARAMS curveParams; /* Must be first field to support pointer casting */
  ITEM privateKey;
} A_EC_PRIVATE_KEY;

typedef struct {
  ITEM modulus;
  ITEM publicExponent;
  ITEM privateExponent;
  ITEM prime[2];                                            /* prime factors */
  ITEM primeExponent[2];                      /* exponents for prime factors */
  ITEM coefficient;                                       /* CRT coefficient */
} A_PKCS_RSA_PRIVATE_KEY;

typedef struct {
  unsigned int effectiveKeyBits;
  unsigned char *iv;
} A_RC2_CBC_PARAMS;

typedef struct {
  unsigned int effectiveKeyBits;
} A_RC2_PARAMS;

typedef struct {
  unsigned int version;
  unsigned int rounds;
  unsigned int wordSizeInBits;
  unsigned char *iv;
} A_RC5_CBC_PARAMS;

typedef struct {
  unsigned int version;
  unsigned int rounds;
  unsigned int wordSizeInBits;
} A_RC5_PARAMS;

typedef struct {
  A_RC5_CBC_PARAMS rc5Params;
  ITEM encryptingKey;
} A_RC5_KEY_ENCRYPTING_PARAMS;
typedef struct {
  ITEM modulus;
  ITEM prime[2];                                            /* prime factors */
  ITEM primeExponent[2];                      /* exponents for prime factors */
  ITEM coefficient;                                       /* CRT coefficient */
} A_RSA_CRT_KEY;

typedef struct {
  ITEM modulus;                                                   /* modulus */
  ITEM exponent;                                                 /* exponent */
} A_RSA_KEY;

typedef struct {
  unsigned int modulusBits;
  ITEM publicExponent;
} A_RSA_KEY_GEN_PARAMS;

typedef struct {
  A_RSA_KEY_GEN_PARAMS keySpecs;
  unsigned int publicKeyUsage;
  unsigned int privateKeyUsage;  
  UINT4 publicLifeTime;
  UINT4 privateLifeTime;
  unsigned int protectFlag;
} A_TOKEN_RSA_KEY_GEN_PARAMS;

typedef struct {
  ITEM y;                                                /* public component */
  A_DSA_PARAMS params;                              /* parameters (p, q, g) */
} A_DSA_PUBLIC_KEY;

typedef struct {
  ITEM x;                                               /* private component */
  A_DSA_PARAMS params;                              /* parameters (p, q, g) */
} A_DSA_PRIVATE_KEY;

typedef struct {
  unsigned int numMatchBits;
  unsigned int numIndexBits;
} A_LZ77_COMPRESS_PARAMS;

typedef struct {
  unsigned int encryptionBlockLen;
} A_PKCS_PARAMS;

/* Information data structure used by FIPS SHA Random number generator */
typedef struct {
ITEM prime;
ITEM seed;
} A_SHA_RANDOM_PARAMS;

typedef struct {
  unsigned int blockLen;   /* Must go first to be compatible with ahchform.c */
  unsigned int oidNum;
  } A_X931_PARAMS;

typedef struct {
  unsigned int keyUsage;
  unsigned int keyLengthInBytes;
  UINT4 lifeTime;
  unsigned int protectFlag;
  unsigned char *cipherName;
} A_SYMMETRIC_KEY_SPECIFIER;

typedef struct {
  unsigned int keyUsage;
  unsigned int keyLengthInBytes;
  UINT4 lifeTime;
  unsigned int protectFlag;
} A_SYMMETRIC_KEY_DEFINER;

typedef struct {
  A_SYMMETRIC_KEY_DEFINER externalSpecs;  	
  unsigned char *keyOID;
  unsigned int keyOIDLen;
  UINT4 dateOfBirth;
} A_X509_ATTRIB_INFO;


typedef struct {
  unsigned int keyUsage;
  UINT4 lifeTime;
  unsigned int protectFlag;
} A_KEYPAIR_DEFINER;

typedef struct {
  A_KEYPAIR_DEFINER privateKeyDef;
  A_KEYPAIR_DEFINER publicKeyDef;  
  POINTER keyParams;
  unsigned char *cipherName;
} A_KEYPAIR_SPECIFIER;

typedef struct {
  A_KEYPAIR_DEFINER externalSpecs;  	
  UINT4 dateOfBirth;
} A_X509_KEYPAIR_ATTRIB_INFO;


#ifdef __cplusplus
}
#endif

#endif /* _ATYPES_H_ */
