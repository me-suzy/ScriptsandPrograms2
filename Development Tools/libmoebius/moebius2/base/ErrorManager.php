<?php
/*  
 * ErrorManager.php	
 * Copyright (C) 2003-2004, Alejandro Espinoza Esparza.
 *
 * Description :
 *	 This class manages all the error messages generated by an object.
 *
 * Author(s):
 *   Alex Espinoza <aespinoza@structum.com.mx>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 *
 */

import("moebius2.base.MessageManager");

/* ---Constants--- */
// Error Priority
define("ERR_PRIORITY_LOW", 0);
define("ERR_PRIORITY_NORMAL", 1);
define("ERR_PRIORITY_NORMAL-HIGH", 2);
define("ERR_PRIORITY_HIGH", 3);

/**
  * This class manages all the error messages generated by an object.
  * @class		ErrorManager
  * @package	moebius2.base
  * @author		Alejandro Espinoza &lt; <a href="mailto:aespinoza@structum.com.mx">aespinoza@structum.com.mx</a> &gt;
  * @version	1.0
  * @requires	MessageManager
  * @see		MessageManager
  */
class ErrorManager extends MessageManager
{
	/* --- Attributes --- */
	var $errPriority;
	
	/* --- Methods ---- */
	/**
	  * Constructor, initializes the owner's package name and class name. Sets the DumpFileName to 'errors'.
	  * @method		ErrorManager
	  * @param		string pkgName	  
	  * @param		string className
	  * @returns	none
	  */	
	function ErrorManager($pkgName, $className)
	{
		MessageManager::MessageManager($pkgName, $className);
		$this->SetDumpFileName("errors");
		$this->errPriority = ERR_PRIORITY_NORMAL;
	}

	/**
	  * Changes the default priority for error messages.
	  * Priorities profiles:
	  * 0 - ERR_PRIORITY_LOW : Dumps only to file (Silent mode).
	  * 1 - ERR_PRIORITY_NORMAL : Dumps to screen (Default mode).
	  * 2 - ERR_PRIORITY_NORMAL-HIGH : Dumps to file and to screen (Critical mode).
	  * 3 - ERR_PRIORITY_HIGH : Dumps to file and to screen; after that halts the system (Fatal mode).	  
	  * @method		SetErrorPriority
	  * @param		int priority
	  * @returns	none
	  */	
	function SetErrorPriority($priority)
	{
		$this->errPriority = $priority;		
	}

	/**
	  * Returns the default priority set for error messages.
	  * @method		GetErrorPriority
	  * @returns	number of the default priority set.
	  */	
	function GetErrorPriority()
	{
		return $this->errPriority;
	}

	/**
	  * Sends an error message to the manager, which in turn dumps it either to screen, to file or to both depending on the priority.
	  * The default priority is based on the global type selected with SetErrorPriority, but it can be overrided by entering a priority
	  * through this function. By selecting a priority through this function, in no way changes the default priority;
	  * to do that use SetErrorPriority.
	  * Priorities profiles:
	  * 0 - ERR_PRIORITY_LOW : Dumps only to file (Silent mode).
	  * 1 - ERR_PRIORITY_NORMAL : Dumps to screen (Default mode).
	  * 2 - ERR_PRIORITY_NORMAL-HIGH : Dumps to file and to screen (Critical mode).
	  * 3 - ERR_PRIORITY_HIGH : Dumps to file and to screen; after that halts the system (Fatal mode).
	  * @method		SendErrorMessage
	  * @param		string methodName
	  * @param		string message
	  * @param		optional const int priority
	  * @returns	none
	  */	
	function SendErrorMessage($methodName, $message, $priority = null)
	{
		$this->SetMessageText($methodName."() -> ".$message);
		$this->GenerateMessage();

		if(is_null($priority) || empty($priority)) {
			$priority = $this->errPriority;
		}
		
		switch($priority)
		{
		case ERR_PRIORITY_LOW:
			$this->DumpMessage(MSGDUMP_FILE);
			break;
		case ERR_PRIORITY_NORMAL:
			$this->DumpMessage(MSGDUMP_SCREEN);			
			break;			
		case ERR_PRIORITY_NORMAL-HIGH:
			$this->DumpMessage(MSGDUMP_FILE);
			$this->DumpMessage(MSGDUMP_SCREEN);			
			break;
		case ERR_PRIORITY_HIGH:
			$this->DumpMessage(MSGDUMP_FILE);
			$this->DumpMessage(MSGDUMP_SCREEN);
			die("System Halted.");
			break;
		}
	}
}
?>