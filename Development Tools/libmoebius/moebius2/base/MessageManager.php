<?php
/*  
 * MessageManager.php	
 * Copyright (C) 2004, Alejandro Espinoza Esparza.
 *
 * Description :
 *	 This class manages all the messages generated by an object.
 *
 * Author(s):
 *   Alejandro Espinoza <aespinoza@structum.com.mx>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 *
 */

import("moebius2.base.Object");
import("moebius2.base.Date");
import("moebius2.base.Time");
import("moebius2.base.FileManager");

/* --- Constants --- */
// Message Dump Types
define("MSGDUMP_SCREEN", 0);
define("MSGDUMP_FILE", 1);

/**
  * This class manages all the messages generated by an object.
  * @class		MessageManager
  * @package	moebius2.base
  * @author		Alejandro Espinoza &lt; <a href="mailto:aespinoza@structum.com.mx">aespinoza@structum.com.mx</a> &gt;
  * @version	1.0
  * @extends	Object  
  * @requires	Object, FileManager, Date, Time
  * @see		FileManager, Date, Time
  */
class MessageManager extends Object
{
	/* --- Attibutes --- */
	var $ownerPkgName;
	var $ownerClassName;
	
	var $dumpType;
	var $dumpFileName;

	var $messageText;
	var $message;
	var $messageFormat;
	
	var $dateFormat;
	var $timeFormat;	      
	
	/* --- Methods ---- */
	/**
	  * Constructor, initializes the owner's package name and class name.
	  * @method		MessageManager
	  * @param		string pkgName	  
	  * @param		string className
	  * @returns	none
	  */	
	function MessageManager($pkgName, $className)
	{
		Object::Object("moebius2.base", "MessageManager");
		
		$this->SetOwnerPackageName($pkgName);
		$this->SetOwnerClassName($className);
		
		$this->SetDumpType(MSGDUMP_SCREEN);
		$this->SetTimeStampFormat("%N %d %Y", "%h:%i:%s %x");
		$this->SetMessageFormat("%T %O %C");
		$this->SetDumpFileName("messages");
	}

	/**
	  * Changes the owner's package name.
	  * @method		SetOwnerPackageName
	  * @param		string pkgName	  
	  * @returns	none
	  */	
	function SetOwnerPackageName($pkgName)
	{
		$this->ownerPkgName = $pkgName;
	}

	/**
	 * Returns the owner's package name.
	 * @method		GetOwnerPackageName
	 * @returns		package name
	 */	
	function GetOwnerPackageName()
	{
		return $this->ownerPkgName;
	}

	/**
	  * Changes the owner's class name.
	  * @method		SetOwnerClassName
	  * @param		string className	  
	  * @returns	none
	  */	
	function SetOwnerClassName($className)
	{
		$this->ownerClassName = $className;
	}

	/**
	 * Returns the owner's class name.
	 * @method		GetClassName
	 * @returns		class name
	 */
	function GetOwnerClassName()
	{
		return $this->ownerClassName;
	}

	/**
	  * Changes the dump file name. This is only used if the message  is set to be dumped on a file (MSGDUMP_FILE).
	  * @method		SetDumpFileName
	  * @param		string fileName  
	  * @returns	none
	  */	
	function SetDumpFileName($fileName)
	{
		$this->dumpFileName = $fileName;
	}

	/**
	  * Returns the dump file name if set.
	  * @method		GetDumpFileName
	  * @returns	dump file name
	  */	
	function GetDumpFileName()
	{
		return $this->dumpFileName;
	}

	/**
	  * Changes the time stamp format. The format used are stablished in the Date and Time classes.
	  * @method		SetTimeStampFormat
	  * @param		string dateFormat
	  * @param		string timeFormat
	  * @returns	none
	  */	
	function SetTimeStampFormat($dateFormat, $timeFormat)
	{
		$this->dateFormat = $dateFormat;
		$this->timeFormat = $timeFormat;
	}

	/**
	  * Returns the time stamp format. The format returned are stablished in the Date and Time classes.
	  * Time stamp format's type:
	  * 0 - date time format (Default)
	  * 1 - date format
	  * 2 - time format	  
	  * @method		GetTimeStampFormat
	  * @param		optional int type
	  * @returns	time stamp format used either date, time or both format
	  */	
	function GetTimeStampFormat($type=0)
	{
		switch($type)
		{
		case 0:
			return $this->dateFormat." ".$this->TimeFormat;			
			break;
		case 1:
			return $this->dateFormat;
			break;
		case 2:
			return $this->timeFormat;
			break;
		}
	}

	/**
	  * Returns the formated time stamp generated with the actual date/time..
	  * @method		GetTimeStamp
	  * @returns	formated time stamp
	  */
	function GetTimeStamp()
	{
		$date =& new Date();
		$time =& new Time();

		$timeStamp  = $date->GetFormatDate($this->dateFormat);
		$timeStamp .= " ";
		$timeStamp .= $time->GetFormatTime($this->timeFormat);

		return $timeStamp;
		
	}   

	/**
	  * Changes the dump type based on constant variables.
	  * Dump Types :
	  * 0 - MSGDUMP_SCREEN : Dump to screen.
	  * 1 - MSGDUMP_FILE : Dump to file.
	  * @method		SetDumpType
	  * @param		int  dumpType
	  * @returns	none
	  */	
	function SetDumpType($dumpType)
	{
		$this->dumpType = $dumpType;
	}

	/**
	  * Returns the dump type
	  * Dump Types :
	  * 0 - MSGDUMP_SCREEN : Dump to screen.
	  * 1 - MSGDUMP_FILE : Dump to file.	  
	  * @method		GetDumpType
	  * @returns	integer that identifies the dump type
	  */	
	function GetDumpType()
	{
		return $this->dumpType;
	}   

	/**
	  * Changes the message text or content.
	  * @method		SetMessageText
	  * @param		string message
	  * @returns	none
	  */
	function SetMessageText($message)
	{
		$this->messageText = $message;
	}

	/**
	  * Returns the message text or content.
	  * @method		GetMessageText
	  * @returns	string containing the message text or content.
	  */	
	function GetMessageText()
	{
		return $this->messageText."\n";
	}

	/**
	  * Changes the message format.
	  * Format variables :
	  * %T = time stamp
	  * %O = message owner or sender
	  * %C = message content
	  * @method		SetMessageFormat
	  * @param		string format
	  * @returns	none
	  */	
	function SetMessageFormat($format)
	{
		$this->messageFormat = $format;
	}

	/**
	  * Returns the message format.
	  * @method		GetMessageFormat
	  * @returns	string containing the format of the message.
	  */	
	function GetMessageFormat()
	{
		return $this->messageFormat;
	}

	/**
	  * Generates the message depending on all the options set. This method can be debugged.
	  * @method		GenerateMessage
	  * @returns	none
	  */	
	function GenerateMessage()
	{
		$this->DebugWriteLine("***** BEGIN DEBUG: GenerateMessage *****");
		
		$format = $this->GetMessageFormat();
		$this->DebugWriteLine("* Message Format Obtained : ".$this->GetMessageFormat());
		
		$formatedMsg = "";
		$temp = "";
		$len = strlen($format);		

		/* * * Parse format * * *
		 * If % found, then get next char.
		 * Then identify type. (Time Stamp, Owner or Content)
		 * Identify property of type. 
		 * - %T = Time Stamp
		 * - %O = Owner
		 * - %C = Message Content.
		 * Finally replace two characters % and char for the selected item.
 		 */
		
		// swipe the string
		for($i = 0; $i < $len; $i++)
		{
			$this->DebugWriteLine("*** Swiping the String #".$i." of ".$len);
			
			// get first char
			$char = substr($format, $i, 1);
			$this->DebugWriteLine("* Obtaining char :".$char);			
			
			// Check if it is a token...
			if($char == "%")  {
				$this->DebugWriteLine("* Found a wildcard");
				
				$i++;
				// Get Next char
				$char = substr($format, $i, 1);

				switch($char)
				{
				case "T":
					$temp = $this->GetTimeStamp();
					$this->DebugWriteLine("* Wildcard of type T (TimeStamp) : ".$temp);
					break;					
				case "O":
					$temp = $this->GetOwnerPackageName().".".$this->GetOwnerClassName();
					$this->DebugWriteLine("* Wildcard of type O (Owner) : ".$temp);					
					break;					
				case "C":
					$temp = $this->GetMessageText();
					$this->DebugWriteLine("* Wildcard of type C (Content) : ".$temp);					
					break;
					
				default:
					$temp = "";
					$this->DebugWriteLine("* Wildcard type not found : ".$char);					
					break;
				}
				$formatedMsg .= $temp;
				$this->DebugWriteLine("* New wildcard block added to the formated message : ".$temp);
			} else {
				$formatedMsg .= $char;
				$this->DebugWriteLine("* New text block added to the formated message ".$temp);
			}
			
		}				
		$this->DebugWriteLine("*** End Swiping the String");
		
		$this->message = $formatedMsg;
		$this->DebugWriteLine("***** END DEBUG: GenerateMessage  *****");
	}

	/**
	  * Dumps the message depending on the dump type selected. The default dump type is based on the global type selected
	  * with SetDumpType, but it can be overrided by entering a type through this function. By selecting
	  * a type through this function, in no way changes the default type; to do that use SetDumpType.
	  * Types :
	  * 0 - MSGDUMP_SCREEN : Dumps to screen.
	  * 1 - MSGDUMP_FILE : Dumps to file.
	  * @method		DumpMessage
	  *	@param		optional int type
	  * @returns	none
	  */	
	function DumpMessage($type="")
	{
		if(empty($type)) {
			$type = $this->dumpType;
		}
		
		switch($type)
		{
		case MSGDUMP_SCREEN:
			print($this->message);
			break;
		case MSGDUMP_FILE:
			$file =& new FileManager($this->dumpFileName);

			$file->InsertLine(0, $this->message);
			$file->Destroy();
			break;
		}
	}

	/**
	  * Sends a message to the manager, which in turn dumps it either to screen or to file depending on the dump type selected.
	  * The default dump type is based on the global type selected with SetDumpType, but it can be overrided by entering a type
	  * through this function. By selecting a type through this function, in no way changes the default type; to do that use SetDumpType.
	  * Types :
	  * 0 - MSGDUMP_SCREEN : Dumps to screen.
	  * 1 - MSGDUMP_FILE : Dumps to file.
	  * @method		SendrMessage
	  * @param		string message
	  * @param		optional int type
	  * @returns	none
	  */	
	function SendMessage($message, $type="")
	{
		$this->SetMessageText($message);
		$this->GenerateMessage();
		$this->DumpMessage($type);
	}
}
?>